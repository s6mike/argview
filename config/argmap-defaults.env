#!/usr/bin/env bash
# shellcheck disable=SC2034 # Turns off unused variable warning, since file is run with set -o allexport to ensure all vars exported
# shellcheck disable=SC2269 # Turns off no definition warning, since doing to ensure some vars are expanded
########
# argmap.env - DEFAULTS
# Copy this to config/argmap.env and customise the values as you wish
#   This file IS considered part of the public API for this app and changing variable names etc will be considered BREAKING.
#   Used mainly to initialise the other config files
# Copyright 2022 Michael Hayes
# SPDX - License - Identifier: MIT
########

echo "Running ${BASH_SOURCE[0]}"

# These two definitions don't change anything, they just ensure that the env vars are expanded when processing config files:
HOME=$HOME
PATH_DIR_CONFIG_ARGMAP_PROCESSED=$PATH_DIR_CONFIG_ARGMAP_PROCESSED

ENV=${ENV:-vscode}
MODE=${MODE:-dev}

# This is here because it's needed for conda use
#   If not actually necessary, could move to env-argmap.yaml, then might not need envsubst to process config files
CONDA_ENV_ARGMAP=argmap

# Needed for non-VSCode environments:
# TODO should set to $HOME/local/argmap by default
#   Add check whether $HOME/git_projects/argmap exists, then set as above instead
#   QUESTION: Change WORKSPACE to PATH_ARGMAP_ROOT?
WORKSPACE=${WORKSPACE:-$HOME/git_projects/${CONDA_ENV_ARGMAP}}
PATH_DIR_SCRIPTS="$WORKSPACE/scripts"

PATH_ARGMAP_ROOT="${PATH_ARGMAP_ROOT:-$WORKSPACE}"
PATH_FILE_YQ=${PATH_FILE_YQ:-$HOME/.local/bin/yq}

PATH_FILE_ENV_ARGMAP="$PATH_ARGMAP_ROOT/config/environment-argmap.yaml"
PATH_FILE_ENV_ARGMAP_DEFAULTS="$PATH_ARGMAP_ROOT/config/environment-argmap-defaults.yaml"
PATH_FILE_CONFIG_ARGMAP_PATHS="$PATH_ARGMAP_ROOT/config/config-argmap-paths.yaml"
# PATH_DIR_CONFIG_ARGMAP_PROCESSED=${PATH_DIR_CONFIG_ARGMAP_PROCESSED:-${PATH_DIR_CONFIG_ARGMAP}/${KEYWORD_PROCESSED}}

# These exports used to be run after PATH_MISC_DEV=$DIR_PROJECTS/misc:

# export PATH_FILE_ENV_CONDA=$WORKSPACE/config/config/environment-conda-argmap.yaml
# PATH_FILE_ENV_CONDA=$(getvar PATH_FILE_ENV_CONDA)
# export PATH_FILE_ENV_CONDA
# export PATH_DIR_ARGMAP_SRC=$WORKSPACE/src

# Adds lua folder to start of PATH so lua files called from there instead of /opt/miniconda3/envs/argmap/bin/argmap2mup
# export PATH_DIR_ARGMAP_LUA="$PATH_DIR_ARGMAP_SRC/lua"
# export PATH="$PATH_DIR_ARGMAP_LUA:$PATH"

# export PANDOC_DATA_DIR="$CONDA_PREFIX/share/pandoc"

# Advantage of $DIR_CHROME_PROFILE_TEMP is that its separate profile from that used by other projects.
# And its random each time.
# DIR_CHROME_PROFILE_TEMP=$(mktemp -d)
# But I think it's better to re-use the same profile so I can have consistent settings.
# export PATH_CHROME_PROFILE_DEBUG=$PATH_MISC_DEV/chrome-debug-argmap

# LUA
# Have removed from conda env
# export LUA_PATH="$PATH_DIR_ARGMAP_LUA/?.lua;$WORKSPACE/lua_modules/share/lua/5.3/?.lua;$WORKSPACE/lua_modules/share/lua/5.3/?/init.lua;"
# LUA_PATH+="/opt/miniconda3/envs/argmap/share/lua/5.3/?.lua;/opt/miniconda3/envs/argmap/share/lua/5.3/?/init.lua;./?.lua;./?/init.lua;"
# export LUA_CPATH="$WORKSPACE/lua_modules/lib/lua/5.3/?.so;"
# LUA_CPATH+="/opt/miniconda3/envs/argmap/lib/lua/5.3/?.so;/opt/miniconda3/envs/argmap/lib/lua/5.3/loadall.so;./?.so;"

# PANDOC - needed for pandoc-argamp.lua until lua reads config directly
# export PATH_DIR_LAYOUTS=$PATH_DIR_ARGMAP_SRC/layouts
# export PATH_DIR_TEMPLATES=$PATH_DIR_ARGMAP_SRC/layouts/templates
# export PATH_DIR_INCLUDES=$PATH_DIR_LAYOUTS/includes
# PATH_INCLUDES_ARGMAP_CONTAINER_DEFAULT=$(getvar PATH_INCLUDES_ARGMAP_CONTAINER_DEFAULT || getvar PATH_INCLUDES_ARGMAP_CONTAINER)
# export PATH_INCLUDES_ARGMAP_CONTAINER_DEFAULT
# export PATH_INCLUDES_ARGMAP_CONTROLS=$PATH_DIR_INCLUDES/mapjs-widget-controls.html

## TESTING INIT

# TODO: could move to separate test/init_script_argmap_test file
# export PATH_TEST_LOG="$HOME/git_projects/misc/tests_output.txt"
# export INPUT_FILE_YML=$WORKSPACE/test/input/example1-clearly-false-white-swan-simplified.yaml
# export INPUT_FILE_YML_NOTES=$WORKSPACE/examples/example-2.yaml
# export INPUT_FILE_JSON=$WORKSPACE/test/input/mapjs-json/example1-clearly-false-white-swan-simplified.json
# export INPUT_FILE_MD0=$WORKSPACE/test/input/markdown/example1-clearly-false-white-swan-simplified-0mapjs.md
# export INPUT_FILE_MD=$WORKSPACE/test/input/markdown/example1-clearly-false-white-swan-simplified-1mapjs.md
# export INPUT_FILE_MD2=$WORKSPACE/test/input/markdown/example1-clearly-false-white-swan-simplified-2mapjs.md
# export INPUT_FILE_MD_META=$WORKSPACE/test/input/markdown/example1-clearly-false-white-swan-simplified-meta-mapjs.md
# export INPUT_FILE_JSON2=$WORKSPACE/test/input/mapjs-json/example2-clearly-false-white-swan-v3.mup
# export INPUT_FILE_JSON_LINKS=$WORKSPACE/test/input/mapjs-json/example1-clearly-false-white-swan-simplified-with-links.json

# PATH_FILE_OUTPUT_EXAMPLE="$(getvar PATH_FILE_OUTPUT_EXAMPLE)"
# export PATH_FILE_OUTPUT_EXAMPLE

: # Do nothing
